
import os
import re

from idl.Array import Array
from idl.Enum import Enum
from idl.Interface import Interface
from idl.Module import Module
from idl.Struct import Struct
from idl.Type import Type
from idl.Typedef import Typedef
from idl.Variable import Variable
from idl.lexer.Lexer import Lexer
from idl.lexer.TokenType import TokenType
from idl.lexer.Utils import PARAM_NAME_MATCH, NUMBER_MATCH

from idl.Annotation import Annotation
from idl.TypeGetter import TypeGetter


class Environment(TypeGetter):
    def __init__(self):
        self.types = []
        
        for i in Type.primitives:
            self.types.append(Type(self, i))
            
        self.modules = []
        
    def compileFile(self, path, moduleName=''):
        try:
            fileObj = open(path, 'r')
        except Exception as e:
            raise RuntimeError('Error opening idl file %r:\n %s' % (path, str(e)))
        
        source = fileObj.read()
        
        if not moduleName:
            moduleName = os.path.basename(path)
        
        fileObj.close()
        
        return self.compile(source, moduleName)

    def compile(self, source, moduleName=''):
        # TODO check module name ?
        
        # Create a new module
        self.__currModule = Module(self, moduleName)
        
        # Create tokens from source
        tokens = Lexer.tokenize(source)
                
        # Create types
        self.__compile(tokens)
        
        # Link types
        self.__link()
        
        # Store the newly created module
        self.modules.append(self.__currModule)
        
        res = self.__currModule
        
        self.__currModule = None
        
        return res
        
    def __addType(self, typeObj):
        '''
        Adds a new type object to the list of types 
        '''

        # Type name check
        for i in self.types:
            if i.name == typeObj.name:
                raise RuntimeError("Type named %r already exists" % typeObj.name)
                
        # Store it in a global list
        self.types.append( typeObj )
        
        # Store it in the current module list
        self.__currModule.types.append(typeObj)
        
    def __compile(self, tokens):
        '''
        First processing pass.
        Processes tokens generated by the lexer.
        '''
        
        tokenProcessors = {
            TokenType.STRUCT_BEGIN : Struct,
            TokenType.INTERFACE_BEGIN : Interface,
            TokenType.ENUM_BEGIN : Enum,
            TokenType.TYPEDEF : Typedef,
        }
        
        annotations = []
        
        while tokens:
            # Take a token and process it
            token = tokens[0]
            
            if token.type == TokenType.ANNOTATION:
                # We keep annotations in a separate list and assign it to the first type we create
                annotations.append( Annotation(tokens) )
                continue
            
            if token.type in tokenProcessors:
                typeObj = tokenProcessors[token.type](self.__currModule, tokens )
                
                typeObj.annotations = annotations
                
                annotations = []
                
                self.__addType( typeObj )
            else:
                raise RuntimeError("Unexpected token type %d" % token.type)
        
    def __findTypesByName(self, name):
        '''
        Find all types with the given name.
        '''
        
        return [i for i in self.types if i.name == name]
    
    def resolveType(self, typeName):
        '''
        Resovles a type name to a type object
        '''
        
        # Is it an array ?
        if typeName.endswith(']'):
            # Resolve its base type first
            baseTypeName = re.compile(PARAM_NAME_MATCH).search(typeName).group(0)
            
            baseType = self.resolveType( baseTypeName )
            
            # Optional size
            try:            
                sizeStr = re.compile('(\[' + NUMBER_MATCH + '\])').search(typeName).group(0)[1:-1]
            except:
                raise RuntimeError("Invalid array size %r" % typeName)
            
            size = -1
            
            if sizeStr:
                size = int(sizeStr)

            if not baseType:
                # Could not resolve base type
                return None
            
            # Create an array type with this base
            return  Array(self, baseType, size)
            
        types = self.__findTypesByName(typeName)
        
        if not types:
            return None
        
        if len(types) != 1:
            # Should this even be allowed to happen ?
            raise RuntimeError("TODO: Not implemented")
        
        return types[0]
    
    def createVariable(self, rawArg):
        resolvedType = self.resolveType(rawArg.type)
        
        if resolvedType:
            return Variable(resolvedType, rawArg.name)
        else:
            return None
            
    def __link(self):
        '''
        Second processing pass.
        Preforms per-type creation (e.g. type to object linking etc.) 
        '''
        
        # Create argument list for each method.
        # This has to be done after the initial method list compile since certain methods
        # may depend on other ones.
        for i in self.types:
            i.create()

